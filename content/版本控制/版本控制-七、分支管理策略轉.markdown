---
title: [版本控制] 八、分支管理策略(轉)
layout: page
date: 2015-06-20 17:21
---

[TOC]

> 以下內容摘自: [Git分支管理策略](http://www.ruanyifeng.com/blog/2012/07/git.html)
後面在網上又看到了個更好的文章, 所以不再推薦閱讀上面的鏈接, 閱讀此鏈接更好: [基於 git 的源代碼管理模型](http://www.ituring.com.cn/article/56870).

這種分支管理策略將 branch 分成兩個主要分支(master、develop), 三種支援性分支(feature、release、hotfixes):

![](http://i59.tinypic.com/fn6xe8.jpg)

大部分情況下, 添加、修改一些小功能, 只需要在Develop 上工作, 但如果想要開發一個稍大點的功能, 或者是需要其他人異步完成的功能, 就基於 Develop 創建一個 feature 分支, 並最終合併到 Develop 上即可.
現在看不懂這句話沒關係, 先閱讀下面的關於這五個分支(兩主三輔)的說明, 再回頭看這句話.

# 一、主分支Master
首先, 代码库应该有且仅有一个主分支, 所有提供给用户使用的正式版本, 都在这个主分支上发布.
Git 主分支的名字, 默认叫做Master, 它是自动建立的, 版本库初始化以后, 默认就是在主分支在进行开发.

# 二、开发分支Develop
主分支只用来分布重大版本, 日常开发应该在另一条分支上完成, 我们把开发用的分支, 叫做 Develop.

这个分支可以用来生成代码的最新隔夜版本(nightly), 如果想正式对外发布, 就在Master分支上, 对Develop分支进行”合并”(merge).

![](http://i62.tinypic.com/2mnodcg.jpg)

创建 Develop 分支的命令: `git checkout -b develop master`

将 Develop 分支发布到 Master 分支的命令:

```
# 切换到Master分支
git checkout master

# 对Develop分支进行合并
git merge --no-ff develop
```
<br>
稍微解释一下 --no-ff 参数是什么意思, 默认情况下, Git执行"快进式合并"(fast-farward merge), 会直接将 Master 分支指向 Develop 分支.

![](http://i59.tinypic.com/25ywrj4.jpg)

使用 –no-ff 参数后, 会在 Master 分支上生成一个新节点, 为了保证版本演进的清晰, 我们希望采用这种做法.

![](http://i62.tinypic.com/2hoa16g.jpg)

# 三、临时性分支
前面讲到版本库的两条主要分支; Master 和 Develop, 前者用于正式发布, 后者用于日常开发.

其实, 常设分支只需要这两条就够了, 不需要其他了.

但是, 除了常设分支以外, 还有一些临时性分支, 用于应对一些特定目的的版本开发, 临时性分支主要有三种:

- 功能（feature）分支
- 预发布（release）分支
- 修补bug（fixbug）分支

这三种分支都属于临时性需要, 使用完以后, 应该删除, 使得代码库的常设分支始终只有 Master 和 Develop.

# 四、 功能分支
接下来, 一个个来看这三种”临时性分支”.

第一种是功能分支, 它是为了开发某种特定功能, 从 Develop 分支上面分出来的, 开发完成后, 要再并入Develop.

功能分支的名字, 可以采用 feature-* 的形式命名.

![](http://i60.tinypic.com/21ezrs6.jpg)

功能分支應該從 Develop 上派生:

```
git checkout -b feature-x develop
git checkout develop
git merge --no-ff feature-x
```
<br>
該分支使用完畢後, 應該刪除它: `git branch -d feature-x`


# 五、预发布分支
第二种是预发布分支, 它是指发布正式版本之前(即合并到 Master 分支之前), 我们可能需要有一个预发布的版本进行测试.

预发布分支是从 Develop 分支上面分出来的, 预发布结束以后, 必须合并进 Develop 和 Master 分支, 它的命名, 可以采用 release-* 的形式.

`git checkout -b release-1.2 develop`

當確認測試沒問題後, 先合并到 Master 分支:

```
git checkout master
git merge --no-ff release-1.2

# 对合并生成的新节点，做一个标签
git tag 1.2
```
<br>
再合併到 Master 分支:

```
git checkout develop
git merge --no-ff release-1.2
```
<br>
最後刪除预发布分支:

`git branch -d release-1.2`

# 六、修补bug分支
最后一种是修补 bug 分支, 软件正式发布以后, 难免会出现bug, 这时就需要创建一个分支, 进行 bug 修补.

修补 bug 分支是从 Master 分支上面分出来的, 修补结束以后, 再合并进 Master 和 Develop 分支, 它的命名, 可以采用 fixbug-* 的形式.

```
#创建一个修补bug分支
git checkout -b fixbug-0.1 master

#修补结束后，合并到 master 分支
git checkout master
git merge --no-ff fixbug-0.1
git tag -a 0.1.1

#再合併到 develop 分支
git checkout develop
git merge --no-ff fixbug-0.1

#最后, 删除"修补bug分支"
git branch -d fixbug-0.1
```
<br>
![](http://i57.tinypic.com/2qxsrrt.jpg)
